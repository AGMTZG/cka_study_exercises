apiVersion: v1
kind: Namespace
metadata:
  name: webapp

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: webapp
spec:
  replicas: 3
  selector:
    matchLabels:
      tier: presentation
      app: frontend
  template:
    metadata:
      labels:
        tier: presentation
        app: frontend
    spec:
      initContainers:
      - name: html
        image: busybox
        command:
        - sh
        - -c
        - |
          cat <<EOF > /work-dir/index.html
          <!DOCTYPE html>
          <html>
          <head><title>Hello</title></head>
          <body><h1>Hello World</h1></body>
          </html>
          EOF
        volumeMounts:
        - name: myvolume
          mountPath: /work-dir
      containers:
      - name: frontend
        image: httpd
        ports:
        - containerPort: 80
        volumeMounts:
        - name: myvolume
          mountPath: /usr/local/apache2/htdocs/
      volumes:
      - name: myvolume
        emptyDir: {}
        
---

apiVersion: v1
kind: Service
metadata:
  name: frontend-service
  namespace: webapp
spec:
  type: ClusterIP
  selector:
    tier: presentation
    app: frontend
  ports:
  - port: 80
    targetPort: 80

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  namespace: webapp
spec:
  replicas: 3
  selector:
    matchLabels:
      component: alpha
      role: internal
      service: backend
  template:
    metadata:
      labels:
        component: alpha
        role: internal
        service: backend
    spec:
      containers:
      - name: backend
        image: busybox
        command: ["sh", "-c", "sleep 1h"]

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: webapp
spec:
  replicas: 3
  selector:
    matchLabels:
      service: redis
  template:
    metadata:
      labels:
        service: redis
    spec:
      containers:
      - name: redis
        image: redis:alpine
        ports:
        - containerPort: 6379
        args: ["redis-server", "--appendonly", "yes"]
        volumeMounts:
        - name: redis-data
          mountPath: /data
      volumes:
      - name: redis-data
        emptyDir: {}

---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: database
  namespace: webapp
spec:
  serviceName: mysql-service
  replicas: 1
  selector:
    matchLabels:
      component: alpha
      role: internal
      service: database
  template:
    metadata:
      labels:
        component: alpha
        role: internal
        service: database
    spec:
      containers:
      - name: database
        image: mysql:5.7
        env:
          - name: MYSQL_ROOT_PASSWORD
            value: '12345678'
        ports:
        - containerPort: 3306
        volumeMounts:
        - name: database-volume
          mountPath: /var/lib/mysql
  volumeClaimTemplates:
  - metadata:
      name: database-volume
    spec:
      resources:
        requests:
          storage: 500M
      accessModes:
      - ReadWriteOnce

---

apiVersion: v1
kind: Service
metadata:
  name: mysql-service
  namespace: webapp
spec:
  clusterIP: None
  selector:
    component: alpha
    role: internal
    service: database
  ports:
  - port: 3306
    targetPort: 3306

---

apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: internal-role-access
  namespace: webapp
spec:
  podSelector:
    matchLabels:
      component: alpha
  policyTypes:
  - Ingress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          component: alpha
          role: internal
          service: backend

---

apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: ingress-from-local-environment
  namespace: webapp
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  ingress:
  - from:
    - namespaceSelector:
        matchExpressions:
        - key: kubernetes.io/metadata.name
          operator: In
          values:
          - webapp

---

apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: http-access
  namespace: webapp
spec:
  podSelector:
    matchLabels:
      tier: presentation
  policyTypes:
  - Ingress
  ingress:
  - ports:
    - protocol: TCP
      port: 80
